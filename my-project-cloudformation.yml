 # ============================================================================
 # CloudWatch Monitoring & Auto Scaling Project
 # by Floyd Brooks
 # June 2025
 # ============================================================================
  

AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudWatch Monitoring & Auto Scaling Project - Production-grade scalable AWS architecture'

Parameters:
  MyIPAddress:
    Type: String
    Description: Your IP address for SSH access to Bastion Host connections #(e.g., format: 72.14.192.0/32)
    Default: '1.2.3.4/32' # replace with your personal IP address
    AllowedPattern: '^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$'
    ConstraintDescription: Must be a valid IP address in CIDR format (x.x.x.x/32)
  
  NotificationEmail:
    Type: String
    Description: Email address for CloudWatch alarm notifications via SNS
    AllowedPattern: '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    ConstraintDescription: Must be a valid email address
  
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair for SSH access
  
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'
    Description: Latest Amazon Linux 2023 (kernel-6.1) AMI ID

Resources:
  # ============================================================================
  # VPC AND NETWORKING
  # ============================================================================
  
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: CloudWatch-Monitoring-VPC
        - Key: Project
          Value: CloudWatch-AutoScaling

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CloudWatch-IGW
        - Key: Project
          Value: CloudWatch-AutoScaling

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1-AZ-1
        - Key: Project
          Value: CloudWatch-AutoScaling

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-2-AZ-2
        - Key: Project
          Value: CloudWatch-AutoScaling

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private-Subnet-1-AZ-1
        - Key: Project
          Value: CloudWatch-AutoScaling

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private-Subnet-2-AZ-2
        - Key: Project
          Value: CloudWatch-AutoScaling

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-Route-Table
        - Key: Project
          Value: CloudWatch-AutoScaling

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-Route-Table-1
        - Key: Project
          Value: CloudWatch-AutoScaling

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Private-Route-Table-2
        - Key: Project
          Value: CloudWatch-AutoScaling

  # Public Route
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route Table Associations
  PublicSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # NAT Gateways
  NATGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NAT-Gateway-1-EIP
        - Key: Project
          Value: CloudWatch-AutoScaling

  NATGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NAT-Gateway-2-EIP
        - Key: Project
          Value: CloudWatch-AutoScaling

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: NAT-Gateway-1
        - Key: Project
          Value: CloudWatch-AutoScaling

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: NAT-Gateway-2
        - Key: Project
          Value: CloudWatch-AutoScaling

  # Private Routes to NAT Gateways
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  # ============================================================================
  # SECURITY GROUPS
  # ============================================================================

  # ALB Security Group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALB-Security-Group
      GroupDescription: Security group for Application Load Balancer
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: Allow HTTP traffic from anywhere
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: ALB-Security-Group
        - Key: Project
          Value: CloudWatch-AutoScaling

  # Bastion Host Security Group
  BastionSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: Bastion-Security-Group
      GroupDescription: Security group for Bastion Host
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MyIPAddress
          Description: Allow SSH from my IP address
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: Bastion-Security-Group
        - Key: Project
          Value: CloudWatch-AutoScaling

  # EC2 Instances Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: EC2-Instances-Security-Group
      GroupDescription: Security group for EC2 instances in private subnet
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
          Description: Allow HTTP traffic from ALB
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSecurityGroup
          Description: Allow SSH from Bastion Host
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: EC2-Instances-Security-Group
        - Key: Project
          Value: CloudWatch-AutoScaling

  # ============================================================================
  # IAM ROLES AND POLICIES
  # ============================================================================

  # EC2 Bastion Role
  EC2BastionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-Bastion-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: EC2-Bastion-Role
        - Key: Project
          Value: CloudWatch-AutoScaling

  EC2BastionInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2-Bastion-Instance-Profile
      Roles:
        - !Ref EC2BastionRole

  # EC2 App Instance Role
  EC2AppInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: EC2-App-Instance-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: EC2-App-Instance-Role
        - Key: Project
          Value: CloudWatch-AutoScaling

  EC2AppInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: EC2-App-Instance-Profile
      Roles:
        - !Ref EC2AppInstanceRole

  # ============================================================================
  # SNS TOPIC AND SUBSCRIPTION
  # ============================================================================

  CloudWatchAlertsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: cloudwatch-alerts-topic
      DisplayName: CloudWatch Alerts
      Tags:
        - Key: Name
          Value: cloudwatch-alerts-topic
        - Key: Project
          Value: CloudWatch-AutoScaling

  EmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref CloudWatchAlertsTopic
      Endpoint: !Ref NotificationEmail
      
  

  # ============================================================================
  # BASTION HOST
  # ============================================================================

  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref LatestAmiId
      InstanceType: t3.micro
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2BastionInstanceProfile
      SecurityGroupIds:
        - !Ref BastionSecurityGroup
      SubnetId: !Ref PublicSubnet1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y amazon-cloudwatch-agent stress-ng
          
          # Configure CloudWatch Agent
          cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
          {
            "metrics": {
              "namespace": "CWAgent",
              "metrics_collected": {
                "cpu": {
                  "measurement": [
                    "cpu_usage_idle",
                    "cpu_usage_iowait",
                    "cpu_usage_user",
                    "cpu_usage_system"
                  ],
                  "metrics_collection_interval": 60
                },
                "disk": {
                  "measurement": [
                    "used_percent"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "diskio": {
                  "measurement": [
                    "io_time"
                  ],
                  "metrics_collection_interval": 60,
                  "resources": [
                    "*"
                  ]
                },
                "mem": {
                  "measurement": [
                    "mem_used_percent"
                  ],
                  "metrics_collection_interval": 60
                }
              }
            },
            "logs": {
              "logs_collected": {
                "files": {
                  "collect_list": [
                    {
                      "file_path": "/var/log/messages",
                      "log_group_name": "bastion-host-logs",
                      "log_stream_name": "{instance_id}-messages"
                    }
                  ]
                }
              }
            }
          }
          EOF
          
          # Start CloudWatch Agent
          /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
      Tags:
        - Key: Name
          Value: Bastion-Host
        - Key: Project
          Value: CloudWatch-AutoScaling

  # ============================================================================
  # LAUNCH TEMPLATE
  # ============================================================================

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: CloudWatch-App-Launch-Template
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t3.micro
        KeyName: !Ref KeyPairName
        IamInstanceProfile:
          Arn: !GetAtt EC2AppInstanceProfile.Arn
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd amazon-cloudwatch-agent
            
            # Start and enable Apache
            systemctl start httpd
            systemctl enable httpd
            
            # Get instance metadata
            INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
            AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
            PRIVATE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
            
            # Create web page with instance metadata
            cat > /var/www/html/index.html << EOF
            <!DOCTYPE html>
            <html>
            <head>
                <title>CloudWatch Auto Scaling Demo</title>
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; background-color: #f5f5f5; }
                    .container { background-color: white; padding: 30px; border-radius: 10px; box-shadow: 0 0 10px rgba(0,0,0,0.1); }
                    .header { color: #232f3e; text-align: center; margin-bottom: 30px; }
                    .info-box { background-color: #e7f3ff; padding: 20px; border-radius: 5px; margin: 10px 0; }
                    .metric { font-weight: bold; color: #0073bb; }
                    .value { color: #333; }
                </style>
            </head>
            <body>
                <div class="container">
                    <h1 class="header">CloudWatch Auto Scaling Portfolio Project</h1>
                    <div class="info-box">
                        <p><span class="metric">Instance ID:</span> <span class="value">$$INSTANCE_ID</span></p>
                        <p><span class="metric">Availability Zone:</span> <span class="value">$$AZ</span></p>
                        <p><span class="metric">Private IP:</span> <span class="value">$$PRIVATE_IP</span></p>
                        <p><span class="metric">Timestamp:</span> <span class="value">$$(date)</span></p>
                    </div>
                    <div class="info-box">
                        <h3>Project Features:</h3>
                        <ul>
                            <li>Multi-AZ High Availability</li>
                            <li>Auto Scaling based on CloudWatch Metrics</li>
                            <li>Custom Metric Collection (CPU, Memory, Disk)</li>
                            <li>Centralized Logging</li>
                            <li>SNS Notifications</li>
                        </ul>
                    </div>
                    <p style="text-align: center; margin-top: 30px;">
                        <em>Refresh the page to see load balancer distribution across instances</em>
                    </p>
                </div>
            </body>
            </html>
            EOF
            
            # Configure CloudWatch Agent
            cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json << 'EOF'
            {
              "metrics": {
                "namespace": "CWAgent",
                "metrics_collected": {
                  "cpu": {
                    "measurement": [
                      "cpu_usage_idle",
                      "cpu_usage_iowait",
                      "cpu_usage_user",
                      "cpu_usage_system"
                    ],
                    "metrics_collection_interval": 60
                  },
                  "disk": {
                    "measurement": [
                      "used_percent"
                    ],
                    "metrics_collection_interval": 60,
                    "resources": [
                      "*"
                    ]
                  },
                  "diskio": {
                    "measurement": [
                      "io_time"
                    ],
                    "metrics_collection_interval": 60,
                    "resources": [
                      "*"
                    ]
                  },
                  "mem": {
                    "measurement": [
                      "mem_used_percent"
                    ],
                    "metrics_collection_interval": 60
                  }
                }
              },
              "logs": {
                "logs_collected": {
                  "files": {
                    "collect_list": [
                      {
                        "file_path": "/var/log/httpd/access_log",
                        "log_group_name": "app-access-logs",
                        "log_stream_name": "{instance_id}-access"
                      },
                      {
                        "file_path": "/var/log/httpd/error_log",
                        "log_group_name": "app-error-logs",
                        "log_stream_name": "{instance_id}-error"
                      },
                      {
                        "file_path": "/var/log/messages",
                        "log_group_name": "app-system-logs",
                        "log_stream_name": "{instance_id}-messages"
                      }
                    ]
                  }
                }
              }
            }
            EOF
            
            # Start CloudWatch Agent
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: CloudWatch-Auto-Scaling-Instance
              - Key: Project
                Value: CloudWatch-AutoScaling

  # ============================================================================
  # APPLICATION LOAD BALANCER
  # ============================================================================

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: CloudWatch-ALB
      Scheme: internet-facing
      Type: application
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: CloudWatch-ALB
        - Key: Project
          Value: CloudWatch-AutoScaling

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: CloudWatch-ALB-TG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      TargetType: instance
      Tags:
        - Key: Name
          Value: CloudWatch-ALB-Target-Group
        - Key: Project
          Value: CloudWatch-AutoScaling

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # ============================================================================
  # AUTO SCALING GROUP
  # ============================================================================

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: CloudWatch-Auto-Scaling-Group
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: CloudWatch-Auto-Scaling-Instance
          PropagateAtLaunch: true
        - Key: Project
          Value: CloudWatch-AutoScaling
          PropagateAtLaunch: true

  # ============================================================================
  # AUTO SCALING POLICIES
  # ============================================================================

  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: 300

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroup
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: 300

  # ============================================================================
  # CLOUDWATCH ALARMS
  # ============================================================================

  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudWatch-CPU-High
      AlarmDescription: Alarm when CPU exceeds 70%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleUpPolicy
        - !Ref CloudWatchAlertsTopic
      TreatMissingData: notBreaching

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudWatch-CPU-Low
      AlarmDescription: Alarm when CPU is below 30%
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 30
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref AutoScalingGroup
      AlarmActions:
        - !Ref ScaleDownPolicy
        - !Ref CloudWatchAlertsTopic
      TreatMissingData: notBreaching

  # ============================================================================
  # CLOUDWATCH LOG GROUPS
  # ============================================================================

  BastionHostLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: bastion-host-logs
      RetentionInDays: 7

  AppAccessLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: app-access-logs
      RetentionInDays: 7

  AppErrorLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: app-error-logs
      RetentionInDays: 7

  AppSystemLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: app-system-logs
      RetentionInDays: 7

# ============================================================================
# OUTPUTS
# ============================================================================

Outputs:
  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  PublicSubnet1Id:
    Description: Public Subnet 1 ID
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-Public-Subnet-1-ID"

  PublicSubnet2Id:
    Description: Public Subnet 2 ID
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-Public-Subnet-2-ID"

  PrivateSubnet1Id:
    Description: Private Subnet 1 ID
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-Private-Subnet-1-ID"

  PrivateSubnet2Id:
    Description: Private Subnet 2 ID
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-Private-Subnet-2-ID"

  ApplicationLoadBalancerDNS:
    Description: Application Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALB-DNS"

  ApplicationLoadBalancerURL:
    Description: Application Load Balancer URL
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"
    Export:
      Name: !Sub "${AWS::StackName}-ALB-URL"

  BastionHostPublicIP:
    Description: Bastion Host Public IP Address
    Value: !GetAtt BastionHost.PublicIp
    Export:
      Name: !Sub "${AWS::StackName}-Bastion-Public-IP"

  SNSTopicArn:
    Description: SNS Topic ARN for CloudWatch Alerts
    Value: !Ref CloudWatchAlertsTopic
    Export:
      Name: !Sub "${AWS::StackName}-SNS-Topic-ARN"

  AutoScalingGroupName:
    Description: Auto Scaling Group Name
    Value: !Ref AutoScalingGroup
    Export:
      Name: !Sub "${AWS::StackName}-ASG-Name"